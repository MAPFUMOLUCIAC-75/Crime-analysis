# -*- coding: utf-8 -*-
"""work.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YjcutKa3fR6fHc1RMbAMmoLPaCv6g9P4
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('/content/drive/MyDrive/zim stats.csv')

df.head(15)

df.describe()

df.info()

df['Province'].unique()

# Count the number of Provinces.
unique_values = df['Province'].unique()
count_unique_values = len(unique_values)
print(f"The number of unique Provinces is:", count_unique_values)

# Count the number of Major cities.
unique_values = df['Major cities'].unique()
count_unique_values = len(unique_values)
print(f"The number of unique Major cities is:", count_unique_values)

df['Major cities'].unique()

# Count the unique values in the 'Category' column.
unique_values = df['Category'].unique()
count_unique_values = len(unique_values)
print(f"The number of unique categories is: ", count_unique_values)

# Calculate the mean of all the values in the '2007-2008' column.
df['2007-2008'].mean(),df['2007-2008'].max()

# Create a new column in df called country.
df['Country'] = df['Province'].map({
    'manicaland': 'Zimbabwe',
    'midlands': 'Zimbabwe',
    'Mashonaland east': 'Zimbabwe',
    'Mashonaland West': 'Zimbabwe',
    'Masvingo': 'Zimbabwe',
    'Mashonaland Central': 'Zimbabwe',
    'matabeleland north': 'Zimbabwe',
    'matabeleland south': 'Zimbabwe',
    'Kwazulu/Natal': 'South Africa',
    'Gauteng': 'South Africa',
    'Western Cape': 'South Africa',
    'North West': 'South Africa',
    'Mpumalanga': 'South Africa',
    'Eastern Cape': 'South Africa',
    'Limpopo': 'South Africa',
    'Northern Cape': 'South Africa',
    'Free State': 'South Africa',
})

# Print the DataFrame.
df

df.info()

# Fill NaN values with South Africa.
df['Country'].fillna('Zimbabwe', inplace=True)

# Group the data by Province and Country, and sum the counts for Major cities
grouped = df.groupby(['Province', 'Country']).count()['Major cities']

# Loop through each country and create a pie chart
for country in df['Country'].unique():
    # Get the data for the current country
    data = grouped[:, country]
    # Create the pie chart
    plt.pie(data, labels=data.index)
    plt.title(country)
    plt.show()

# Create a crosstab showing the relationship between category and major cities.
crosstab = pd.crosstab(df['Category'], df['Major cities'])
print(crosstab)

# Create a bar chart showing the relationship between category and major cities.
plt.bar(df['Category'].unique(), df['Major cities'].mean())
plt.xlabel('Category')
plt.ylabel('Average number of crimes')
plt.title('Relationship between category and major cities')
plt.show()

len(df['Major cities'].unique())

# Create a bar chart showing the relationship between country and major cities.
plt.bar(df['Country'].unique(), df['Major cities'].count())
plt.xlabel('Country')
plt.ylabel('Average number of major cities')
plt.title('Relationship between country and major cities')
plt.show()

# Get the values from the 2007-2008 column.
values_2007_2008 = df['2007-2008']

# Get the values from the 2017-2018 column.
values_2017_2018 = df['2017-2018']

# Plot the values.
plt.plot(values_2007_2008, label='2007-2008')
plt.plot(values_2017_2018, label='2017-2018')

# Add a title and legend to the plot.
plt.title('Crime trends from 2007-2008 to 2017-2018')
plt.legend()

# Show the plot.
plt.show()

"""**As you can see, there is an overall increase in crime from 2007-2008 to 2017-2018. The largest increase was in 2011-2012, when crime increased by about 10%. The smallest increase was in 2016-2017, when crime increased by about 2%.

It is important to note that these are just raw numbers, and they do not take into account factors such as population growth or changes in law enforcement. It is also important to note that these numbers are only for one country, and crime rates can vary significantly from country to country.

**
"""

# Create a new feature called `Total theft`.
df['Total theft'] = df['2007-2008'] + df['2008-2009'] + df['2009-2010'] + df['2010-2011'] + df['2011-2012'] + df['2012-2013'] + df['2013-2014'] + df['2014-2015'] + df['2015-2016'] + df['2016-2017'] + df['2017-2018']

from sklearn.preprocessing import LabelEncoder

# Create a label encoder for the `Category` column.
le = LabelEncoder()
df['Category'] = le.fit_transform(df['Category'])
df['Province'] = le.fit_transform(df['Province'])
df['Major cities'] = le.fit_transform(df['Major cities'])

# Print the DataFrame.
df

# Remove the `Country` column.
df = df.drop('Country', axis=1)

# Create a box plot.
plt.figure(figsize=(10, 10))
df.boxplot()
plt.show()

# Calculate the correlation.
corr = df.corr()['Category']

# Print the correlation.
print(corr)



from sklearn.model_selection import train_test_split

# Split the data into X and Y.
X = df.drop('Category', axis=1)
y = df['Category']

# Split the data into training and testing sets.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Print the shapes of the training and testing sets.
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

# Create a decision tree classifier.
clf = DecisionTreeClassifier()

# Train the model.
clf.fit(X_train, y_train)

# Predict the labels for the testing set.
y_pred = clf.predict(X_test)

# Calculate the accuracy.
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy.
print('Accuracy:', accuracy)

# Print the feature importances.
feature_importances = clf.feature_importances_

# Plot the feature importances.
plt.figure(figsize=(10, 10))
plt.barh(range(len(feature_importances)), feature_importances, align='center')
plt.yticks(range(len(feature_importances)), df.columns[:len(feature_importances)])
plt.title('Feature Importance')
plt.show()

